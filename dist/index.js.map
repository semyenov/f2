{"version":3,"file":"index.js","names":[],"sources":["../src/index.ts"],"sourcesContent":["/**\n * # Federation Framework\n *\n * Complete Apollo Federation 2.x framework with Effect-TS, ultra-strict TypeScript patterns,\n * and enterprise-grade resilience features for building production-ready GraphQL federation systems.\n *\n * ## 🚀 Key Features\n *\n * - **🏗️ Effect-First Architecture**: Built entirely on Effect-TS for composable, type-safe operations\n * - **🌐 Apollo Federation 2.x**: Full support for all federation directives and patterns\n * - **🔒 Ultra-Strict TypeScript**: Zero `any` usage with comprehensive type safety\n * - **⚡ Performance Optimizations**: Query plan caching, DataLoader batching, circuit breakers\n * - **🛡️ Enterprise Resilience**: Circuit breakers, timeouts, error boundaries, retry policies\n * - **📋 Schema-First Development**: Import and hot-reload GraphQL schemas with AST conversion\n * - **🧪 Experimental Patterns**: Phantom types, branded types, and compile-time validation\n * - **🎯 Pattern Matching**: Exhaustive error handling with discriminated unions\n *\n * ## 📚 Quick Start\n *\n * ```typescript\n * import { createEntityBuilder, FederationEntityBuilder } from '@cqrs/federation'\n * import { Effect } from 'effect'\n * import * as Schema from 'effect/Schema'\n *\n * // Define your entity schema\n * const UserSchema = Schema.Struct({\n *   id: Schema.String,\n *   email: Schema.String,\n *   name: Schema.String\n * })\n *\n * // Create a federated entity with directives\n * const userEntity = createEntityBuilder('User', UserSchema, ['id'])\n *   .withShareableField('name')\n *   .withInaccessibleField('email')\n *   .withReferenceResolver((ref, context, info) =>\n *     Effect.succeed({ ...ref, name: 'John Doe' })\n *   )\n *\n * // Build the entity with validation\n * const entity = yield* userEntity.build()\n * ```\n *\n * ## 🏛️ Architecture\n *\n * The framework follows a layered Effect-TS architecture:\n *\n * ```\n * ┌─────────────────────────────────────┐\n * │           Application Layer         │  ← Your GraphQL resolvers\n * ├─────────────────────────────────────┤\n * │         Federation Layer            │  ← Entity builders, composition\n * ├─────────────────────────────────────┤\n * │      Performance & Resilience       │  ← Caching, circuit breakers\n * ├─────────────────────────────────────┤\n * │            Core Layer               │  ← Types, errors, services\n * ├─────────────────────────────────────┤\n * │           Effect Runtime            │  ← Effect-TS foundation\n * └─────────────────────────────────────┘\n * ```\n *\n * ## 📖 Documentation Sections\n *\n * - **{@link createEntityBuilder | Core API}** - Essential entity building functionality\n * - **{@link FederationEntityBuilder | Entity Builders}** - Fluent builders for federation entities\n * - **{@link PerformanceOptimizations | Performance & Caching}** - Query caching and optimization\n * - **{@link FederationErrorBoundaries | Error Handling & Resilience}** - Circuit breakers and fault tolerance\n * - **{@link Experimental | Experimental Features}** - Advanced patterns and ultra-strict builders\n *\n * ## 🎯 Design Principles\n *\n * 1. **Effect-First**: All async operations return `Effect.Effect<Success, Error, Requirements>`\n * 2. **No Exceptions**: Use algebraic error types with exhaustive pattern matching\n * 3. **Composability**: Layer-based dependency injection for testable, modular design\n * 4. **Type Safety**: Leverage TypeScript's type system to prevent runtime errors\n * 5. **Performance**: Built-in optimizations for production workloads\n * 6. **Developer Experience**: Comprehensive tooling and excellent error messages\n *\n * @packageDocumentation\n * @author CQRS Federation Team\n * @see {@link https://github.com/cqrs/federation | GitHub Repository}\n * @see {@link https://www.apollographql.com/docs/federation/ | Apollo Federation Docs}\n * @see {@link https://effect.website/ | Effect-TS Documentation}\n */\n\n// Re-export commonly used items for backward compatibility\nexport { \n  createEntityBuilder,\n  FederationEntityBuilder,\n  toFederationEntity \n} from './runtime/core/builders/entity-builder.js'\n\nexport {\n  ValidationError,\n  FederationError,\n  CompositionError,\n  ErrorFactory\n} from './runtime/core/errors/errors.js'\n\n// Export main federation components\nexport { FederationComposer } from './federation/composition/composer.js'\nexport { SubgraphManagement } from './federation/subgraphs/subgraph.js'\n\n// Export infrastructure components\nexport { FederationErrorBoundaries } from './infrastructure/resilience/error-boundaries.js'\nexport { PerformanceOptimizations } from './infrastructure/performance/performance.js'\n\n// Re-export submodules for tree-shaking\nexport * as Runtime from './runtime'\nexport * as Federation from './federation'\nexport * as Infrastructure from './infrastructure'\nexport * as Api from './api'\n\n/**\n * Framework version\n */\nexport const VERSION = '2.0.0' as const\n\n/**\n * Framework metadata\n */\nexport const FRAMEWORK_INFO = {\n  name: '@cqrs/federation',\n  version: VERSION,\n  description: 'Apollo Federation 2.x with Effect-TS',\n  features: [\n    'Effect-First Architecture',\n    'Apollo Federation 2.x Support',\n    'Ultra-Strict TypeScript',\n    'Algebraic Error System',\n    'Performance Optimizations',\n    'Schema-First Development',\n    'Circuit Breakers',\n    'Hot Reload',\n    'Layer-based Dependency Injection',\n    'Effect.gen Patterns',\n    'Structured Logging',\n    'Type-safe Configuration',\n    'Pattern Matching Error Handling',\n    'Modern Test Infrastructure',\n  ],\n} as const\n"],"mappings":";;;;;;;;;;;;;AAoHA,MAAa,UAAU;;;;AAKvB,MAAa,iBAAiB;CAC5B,MAAM;CACN,SAAS;CACT,aAAa;CACb,UAAU;EACR;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA"}